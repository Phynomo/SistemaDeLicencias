// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using SistemaLicencias.Entities.Entities;

#nullable disable

namespace SistemaLicencias.DataAccess.Context
{
    public partial class SistemadelicenciasContext : DbContext
    {
        public SistemadelicenciasContext()
        {
        }

        public SistemadelicenciasContext(DbContextOptions<SistemadelicenciasContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_tbAprobados_View> VW_tbAprobados_View { get; set; }
        public virtual DbSet<VW_tbEmpleados_View> VW_tbEmpleados_View { get; set; }
        public virtual DbSet<VW_tbPantallasPorRoles_View> VW_tbPantallasPorRoles_View { get; set; }
        public virtual DbSet<VW_tbRechazados_View> VW_tbRechazados_View { get; set; }
        public virtual DbSet<VW_tbRoles_View> VW_tbRoles_View { get; set; }
        public virtual DbSet<VW_tbSolicitantes_View> VW_tbSolicitantes_View { get; set; }
        public virtual DbSet<VW_tbSolicitud_View> VW_tbSolicitud_View { get; set; }
        public virtual DbSet<VW_tbTiposLicencias_View> VW_tbTiposLicencias_View { get; set; }
        public virtual DbSet<VW_tbUsuarios_View> VW_tbUsuarios_View { get; set; }
        public virtual DbSet<tbAprobados> tbAprobados { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbRechazados> tbRechazados { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbSolicitantes> tbSolicitantes { get; set; }
        public virtual DbSet<tbSolicitud> tbSolicitud { get; set; }
        public virtual DbSet<tbSucursales> tbSucursales { get; set; }
        public virtual DbSet<tbTiposLicencias> tbTiposLicencias { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<VW_tbAprobados_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbAprobados_View", "lice");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.apro_Fecha).HasColumnType("date");

                entity.Property(e => e.apro_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.apro_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.apro_Observaciones).HasMaxLength(500);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_Apellido)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_Identidad)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.soli_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.soli_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.tili_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEmpleados_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEmpleados_View", "lice");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_CorreoElectronico).HasMaxLength(200);

                entity.Property(e => e.empe_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<VW_tbPantallasPorRoles_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPantallasPorRoles_View", "acce");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.pant_HtmlId)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.prol_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.prol_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbRechazados_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbRechazados_View", "lice");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.rech_Fecha).HasColumnType("date");

                entity.Property(e => e.rech_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.rech_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.rech_Observaciones).HasMaxLength(500);

                entity.Property(e => e.soli_Apellido)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_Identidad)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.soli_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.soli_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.tili_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbRoles_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbRoles_View", "acce");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.role_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbSolicitantes_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbSolicitantes_View", "lice");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.soli_Apellido)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_Direccion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.soli_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.soli_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.soli_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.soli_Identidad)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.soli_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.soli_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.soli_Telefono).HasMaxLength(20);
            });

            modelBuilder.Entity<VW_tbSolicitud_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbSolicitud_View", "lice");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.soli_Apellido)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.stud_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.stud_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.tili_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbTiposLicencias_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbTiposLicencias_View", "lice");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UsuarioModificacion).HasMaxLength(100);

                entity.Property(e => e.tili_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.tili_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.tili_FechaModificacion).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_tbUsuarios_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbUsuarios_View", "acce");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.role_Nombre).HasMaxLength(100);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbAprobados>(entity =>
            {
                entity.HasKey(e => e.apro_Id)
                    .HasName("PK_lice_tbAprovados_apro_Id");

                entity.ToTable("tbAprobados", "lice");

                entity.Property(e => e.apro_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.apro_Fecha).HasColumnType("date");

                entity.Property(e => e.apro_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.apro_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.apro_Observaciones).HasMaxLength(500);

                entity.HasOne(d => d.apro_UsuCreacionNavigation)
                    .WithMany(p => p.tbAprobadosapro_UsuCreacionNavigation)
                    .HasForeignKey(d => d.apro_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbAprovados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.apro_UsuModificacionNavigation)
                    .WithMany(p => p.tbAprobadosapro_UsuModificacionNavigation)
                    .HasForeignKey(d => d.apro_UsuModificacion)
                    .HasConstraintName("FK_lice_tbAprovados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbAprobados)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbAprovados_lice_tbEmpleados_empe_Id");

                entity.HasOne(d => d.stud)
                    .WithMany(p => p.tbAprobados)
                    .HasForeignKey(d => d.stud_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbAprovados_lice_tbSolicitud_stud_Id");
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_lice_tbcargos_carg_Id");

                entity.ToTable("tbCargos", "lice");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.carg_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.carg_UsuCreacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuCreacionNavigation)
                    .HasForeignKey(d => d.carg_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PK_lice_tbCargos_acce_tbUsuarios_carg_UsuCreacion");

                entity.HasOne(d => d.carg_UsuModificacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuModificacionNavigation)
                    .HasForeignKey(d => d.carg_UsuModificacion)
                    .HasConstraintName("PK_lice_tbCargos_acce_tbUsuarios_carg_UsuModificacion");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.depa_Id)
                    .HasName("PK_gral_tbDepartamentos_depa_Id");

                entity.ToTable("tbDepartamentos", "gral");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.depa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.depa_UsuCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuCreacionNavigation)
                    .HasForeignKey(d => d.depa_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuCreacion_user_Id");

                entity.HasOne(d => d.depa_UsuModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuModificacionNavigation)
                    .HasForeignKey(d => d.depa_UsuModificacion)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empe_Id)
                    .HasName("PK_lice_tbEmpleados_empe_Id");

                entity.ToTable("tbEmpleados", "lice");

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_CorreoElectronico).HasMaxLength(200);

                entity.Property(e => e.empe_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.empe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbEmpleados_lice_tbCargos_carg_Id");

                entity.HasOne(d => d.eciv)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.eciv_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbEmpleados_gral_tbEstadosCiviles_eciv_Id");

                entity.HasOne(d => d.empe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.empe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbEmpleados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.empe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.empe_UsuModificacion)
                    .HasConstraintName("FK_lice_tbEmpleados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbEmpleados_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbEmpleados_lice_tbSucursales_sucu_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.eciv_Id)
                    .HasName("PK_gral_tbEstadosCiviles_ectv_Id");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.eciv_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.eciv_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.eciv_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.eciv_UsuCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivileseciv_UsuCreacionNavigation)
                    .HasForeignKey(d => d.eciv_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_UsuCreacion_usua_Id");

                entity.HasOne(d => d.eciv_UsuModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivileseciv_UsuModificacionNavigation)
                    .HasForeignKey(d => d.eciv_UsuModificacion)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_Id)
                    .HasName("PK_gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.HasOne(d => d.depa)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.depa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_gral_tbDepartamentos_depa_Id");

                entity.HasOne(d => d.muni_UsuCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuCreacionNavigation)
                    .HasForeignKey(d => d.muni_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuCreacion_user_Id");

                entity.HasOne(d => d.muni_UsuModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuModificacionNavigation)
                    .HasForeignKey(d => d.muni_UsuModificacion)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_acce_tbPantallas_pant_Id");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_HtmlId)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.prol_Id)
                    .HasName("PK_acce_tbPantallasPorRoles_pantrole_Id");

                entity.ToTable("tbPantallasPorRoles", "acce");

                entity.Property(e => e.prol_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prol_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prol_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbPantallas_pant_Id");

                entity.HasOne(d => d.prol_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesprol_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prol_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuCreacion_user_Id");

                entity.HasOne(d => d.prol_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesprol_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prol_UsuModificacion)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuModificacion_user_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbRoles_role_Id");
            });

            modelBuilder.Entity<tbRechazados>(entity =>
            {
                entity.HasKey(e => e.rech_Id)
                    .HasName("PK_lice_tbRechazados_apro_Id");

                entity.ToTable("tbRechazados", "lice");

                entity.Property(e => e.rech_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.rech_Fecha).HasColumnType("date");

                entity.Property(e => e.rech_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.rech_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.rech_Observaciones).HasMaxLength(500);

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbRechazados)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbRechazados_lice_tbEmpleados_empe_Id");

                entity.HasOne(d => d.rech_UsuCreacionNavigation)
                    .WithMany(p => p.tbRechazadosrech_UsuCreacionNavigation)
                    .HasForeignKey(d => d.rech_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbRechazados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.rech_UsuModificacionNavigation)
                    .WithMany(p => p.tbRechazadosrech_UsuModificacionNavigation)
                    .HasForeignKey(d => d.rech_UsuModificacion)
                    .HasConstraintName("FK_lice_tbRechazados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.stud)
                    .WithMany(p => p.tbRechazados)
                    .HasForeignKey(d => d.stud_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbRechazados_lice_tbSolicitud_stud_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "acce");

                entity.HasIndex(e => e.role_Nombre, "UQ__tbRoles__3895D82ED0F8CF8D")
                    .IsUnique();

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UsuCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.role_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.role_UsuModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.role_UsuModificacion)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbSolicitantes>(entity =>
            {
                entity.HasKey(e => e.soli_Id)
                    .HasName("PK_lice_tbSolicitantes_soli_Id");

                entity.ToTable("tbSolicitantes", "lice");

                entity.HasIndex(e => e.soli_Identidad, "UQ__tbSolici__ACE8F0CBBE1BCDC1")
                    .IsUnique();

                entity.Property(e => e.soli_Apellido)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_Direccion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.soli_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.soli_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.soli_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.soli_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.soli_Identidad)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.soli_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.soli_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.soli_Telefono).HasMaxLength(20);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbSolicitantes)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSolicitantes_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.soli_UsuCreacionNavigation)
                    .WithMany(p => p.tbSolicitantessoli_UsuCreacionNavigation)
                    .HasForeignKey(d => d.soli_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSolicitantes_acce_tbUsuarios_soli_UsuCreacion_user_Id");

                entity.HasOne(d => d.soli_UsuModificacionNavigation)
                    .WithMany(p => p.tbSolicitantessoli_UsuModificacionNavigation)
                    .HasForeignKey(d => d.soli_UsuModificacion)
                    .HasConstraintName("FK_lice_tbSolicitantes_acce_tbUsuarios_soli_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbSolicitud>(entity =>
            {
                entity.HasKey(e => e.stud_Id)
                    .HasName("PK_lice_tbSolicitud_stud_Id");

                entity.ToTable("tbSolicitud", "lice");

                entity.Property(e => e.stud_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.stud_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.stud_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.stud_Intentos).HasDefaultValueSql("((5))");

                entity.HasOne(d => d.soli)
                    .WithMany(p => p.tbSolicitud)
                    .HasForeignKey(d => d.soli_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSolicitud_lice_tbSolicitantes_soli_Id");

                entity.HasOne(d => d.stud_UsuCreacionNavigation)
                    .WithMany(p => p.tbSolicitudstud_UsuCreacionNavigation)
                    .HasForeignKey(d => d.stud_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSolicitud_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.stud_UsuModificacionNavigation)
                    .WithMany(p => p.tbSolicitudstud_UsuModificacionNavigation)
                    .HasForeignKey(d => d.stud_UsuModificacion)
                    .HasConstraintName("FK_lice_tbSolicitud_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbSolicitud)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSolicitud_lice_tbSucursales_sucu_Id");

                entity.HasOne(d => d.tili)
                    .WithMany(p => p.tbSolicitud)
                    .HasForeignKey(d => d.tili_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSolicitud_lice_tbTiposLiciencias_tili_Id");
            });

            modelBuilder.Entity<tbSucursales>(entity =>
            {
                entity.HasKey(e => e.sucu_Id)
                    .HasName("PK_lice_tbSucursales_sucu_Id");

                entity.ToTable("tbSucursales", "lice");

                entity.Property(e => e.sucu_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.sucu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSucursales_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu_UsuCreacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UsuCreacionNavigation)
                    .HasForeignKey(d => d.sucu_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSucursales_acce_tbUsuarios_sucu_UsuCreacion");

                entity.HasOne(d => d.sucu_UsuModificacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UsuModificacionNavigation)
                    .HasForeignKey(d => d.sucu_UsuModificacion)
                    .HasConstraintName("FK_lice_tbSucursales_acce_tbUsuarios_sucu_UsuModificacion");
            });

            modelBuilder.Entity<tbTiposLicencias>(entity =>
            {
                entity.HasKey(e => e.tili_Id)
                    .HasName("PK_lice_tbTiposLicencias_tili_Id");

                entity.ToTable("tbTiposLicencias", "lice");

                entity.HasIndex(e => e.tili_Descripcion, "UQ__tbTiposL__F7BA37CA1328BAF7")
                    .IsUnique();

                entity.Property(e => e.tili_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.tili_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tili_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.tili_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.tili_UsuCreacionNavigation)
                    .WithMany(p => p.tbTiposLicenciastili_UsuCreacionNavigation)
                    .HasForeignKey(d => d.tili_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbTiposLicencias_acce_tbUsuarios_tili_UsuCreacion");

                entity.HasOne(d => d.tili_UsuModificacionNavigation)
                    .WithMany(p => p.tbTiposLicenciastili_UsuModificacionNavigation)
                    .HasForeignKey(d => d.tili_UsuModificacion)
                    .HasConstraintName("FK_lice_tbTiposLicencias_acce_tbUsuarios_tili_UsuModificacion");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.user_Id)
                    .HasName("PK_acce_tbUsuarios_user_Id");

                entity.ToTable("tbUsuarios", "acce");

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.user_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.empe_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_lice_tbEmpleados_empe_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbRoles_role_Id");

                entity.HasOne(d => d.user_UsuCreacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuCreacionNavigation)
                    .HasForeignKey(d => d.user_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuCreacion_user_Id");

                entity.HasOne(d => d.user_UsuModificacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuModificacionNavigation)
                    .HasForeignKey(d => d.user_UsuModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuModificacion_user_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}